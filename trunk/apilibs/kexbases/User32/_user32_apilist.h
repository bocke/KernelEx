/*
 *  KernelEx
 *  Copyright (C) 2008, Xeno86
 *
 *  This file is part of KernelEx source code.
 *
 *  KernelEx is free software; you can redistribute it and/or modify
 *  it under the terms of the GNU General Public License as published
 *  by the Free Software Foundation; version 2 of the License.
 *
 *  KernelEx is distributed in the hope that it will be useful,
 *  but WITHOUT ANY WARRANTY; without even the implied warranty of
 *  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *  GNU General Public License for more details.
 *
 *  You should have received a copy of the GNU General Public License
 *  along with GNU Make; see the file COPYING.  If not, write to
 *  the Free Software Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.
 *
 */

#ifndef _USER32_APILIST_H
#define _USER32_APILIST_H

#include "kexcoresdk.h"

/* There is no GetAltTabInfoA or RealGetWindowClassA in 9x */
#ifdef GetAltTabInfo
#undef GetAltTabInfo
#endif
EXTERN_C BOOL WINAPI GetAltTabInfo(HWND,int,PVOID,LPSTR,UINT);
#ifdef RealGetWindowClass
#undef RealGetWindowClass
#endif
EXTERN_C UINT WINAPI RealGetWindowClass(HWND  hwnd, LPTSTR pszType, UINT  cchType);


typedef BOOL (WINAPI *IsHungThread_t)(DWORD ThreadID);
extern IsHungThread_t IsHungThread_pfn;
typedef BOOL (WINAPI *DrawCaptionTempA_t)(HWND, HDC, const RECT*, HFONT, HICON, LPCSTR, UINT);
extern DrawCaptionTempA_t DrawCaptionTempA_pfn;
typedef int (WINAPI *GetMouseMovePoints_t)(UINT,LPMOUSEMOVEPOINT,LPMOUSEMOVEPOINT,int,DWORD);
extern GetMouseMovePoints_t GetMouseMovePoints_pfn;

BOOL init_user32();
extern const apilib_api_table apitable_user32;

/*** AUTOGENERATED APILIST DECLARATIONS BEGIN ***/
LRESULT WINAPI CallWindowProcA_fix(WNDPROC lpPrevWndFunc, HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
void __stdcall DisableProcessWindowsGhosting_new(void);
BOOL WINAPI EnableWindow_new(HWND hWnd, BOOL bEnable);
BOOL WINAPI AllowSetForegroundWindow_98(DWORD procid);
BOOL WINAPI LockSetForegroundWindow_98(UINT lockcode);
HWND APIENTRY GetAncestor_fix(HWND hwnd, UINT gaFlags);
int WINAPI GetMouseMovePointsEx_98(UINT size, LPMOUSEMOVEPOINT ptin, LPMOUSEMOVEPOINT ptout, int count, DWORD res);
HWND WINAPI GetNextDlgTabItem_fix(HWND hDlg, HWND hCtl, BOOL bPrevious);
BOOL WINAPI IsHungAppWindow_new(HWND hWnd);
BOOL WINAPI LockWorkStation_new(void);
UINT WINAPI MapVirtualKeyA_new(UINT uCode, UINT uMapType);
UINT WINAPI MapVirtualKeyExA_new(UINT uCode, UINT uMapType, HKL dwhkl);
LRESULT WINAPI SendMessageA_fix(HWND hWnd, UINT Msg, WPARAM wParam, LPARAM lParam);
int WINAPI ToUnicodeEx_new(UINT wVirtKey, UINT wScanCode, const PBYTE lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags, HKL dwhkl);
int WINAPI ToUnicode_new(UINT wVirtKey, UINT wScanCode, const PBYTE lpKeyState, LPWSTR pwszBuff, int cchBuff, UINT wFlags);
BOOL WINAPI GetLastInputInfo_new(PLASTINPUTINFO plii);
BOOL WINAPI GetMessageW_new(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
LONG WINAPI GetWindowLongA_new(HWND hWnd, int nIndex);
BOOL WINAPI UpdateLayeredWindow_new(HWND hwnd, HDC hdcDst, POINT *pptDst, SIZE *psize, HDC hdcSrc, POINT *pptSrc, COLORREF crKey, BLENDFUNCTION *pblend, DWORD dwFlags);
STUB SetLayeredWindowAttributes_stub;
LPWSTR WINAPI CharNextExW_new(WORD codepage, LPCWSTR ptr, DWORD flags);
LPWSTR WINAPI CharNextW_new(LPCWSTR x);
LPSTR WINAPI CharPrevExW_new(WORD codepage, LPCWSTR start, LPCWSTR ptr, DWORD flags);
LPWSTR WINAPI CharPrevW_new(LPCWSTR start,LPCWSTR x);
BOOL WINAPI CharToOemBuffW_new(LPCWSTR s, LPSTR d, DWORD len);
BOOL WINAPI CharToOemW_new(LPCWSTR s, LPSTR d);
BOOL WINAPI OemToCharBuffW_new(LPCSTR s, LPWSTR d, DWORD len);
BOOL WINAPI OemToCharW_new(LPCSTR s, LPWSTR d);
LPWSTR WINAPI CharLowerW_new(LPWSTR x);
LPWSTR WINAPI CharUpperW_new(LPWSTR x);
DWORD WINAPI CharLowerBuffW_new(LPWSTR str, DWORD len);
DWORD WINAPI CharUpperBuffW_new(LPWSTR str, DWORD len);
BOOL WINAPI IsCharLowerW_new(WCHAR x);
BOOL WINAPI IsCharUpperW_new(WCHAR x);
BOOL WINAPI IsCharAlphaNumericW_new(WCHAR x);
BOOL WINAPI IsCharAlphaW_new(WCHAR x);
BOOL WINAPI DrawCaptionTempW_new(HWND hwnd, HDC hdc, const RECT *rect, HFONT hFont, HICON hIcon, LPCWSTR strW, UINT uFlags);
int WINAPI LoadStringW_new(HINSTANCE hInstance, UINT uID, LPWSTR lpBuffer, int nBufferMax);
UINT WINAPI RealGetWindowClassW_new(HWND hwnd, LPWSTR pszTypeW, UINT cchType);
/*** AUTOGENERATED APILIST DECLARATIONS END ***/

#endif
